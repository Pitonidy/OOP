# class Person:
#     def __init__(self, name, age, specialization):
#         self.name = name
#         self.age = age
#         self._specialization = specialization

#     def eat(self):
#         print(f'{self.name} {self._specialization} кушает')
    
#     def sleep(self):
#         print(f'{self.name} {self._specialization} спит')
    
#     def love(self):
#         print(f'{self.name} {self._specialization} любить')
    
#     def __str__(self):
#         return f" {self._specialization} по имени {self.name}"


# class Doctor(Person):
#     def heal(self):
#         print(f'{self.name} {self._specialization} лечит')
    

# class Fireman(Doctor):
#     def tushit(self):
#         print(f'{self.name} {self._specialization} тушить огонь')

   
# class Teacher(Fireman):
#     def teach(self):
#         print(f'{self.name} {self._specialization} Учит')

#     def __heal(self):
#         print('лечу как хочу')
    
#     def get(self):
#         self.__heal() 
    

# teacher1 = Teacher('Kiri', 16, 'Python Backend development')
# teacher1.slee

# class Zoo:
#     pass

# z = Zoo()
# z.animal_1 = "Leone"

# print(z.animal_1)


# 3) Есть Помидор со следующими характеристиками: 
# 1. Индекс 
# 2. Стадия зрелости(
        # стадии: Отсутствует, Цветение, Зеленый, Красный)

# Помидор может: 
# 1. Расти (переходить на следующую стадию созревания)
# 2. Предоставлять информацию о своей зрелости

# Есть Куст с помидорами, который: 
# 1. Содержит список томатов, которые на ней растут

# И может: 
# 1. Расти вместе с томатами
# 2. Предоставлять информацию о зрелости всех томатов
# 3. Предоставлять урожай

# И также есть Садовник, который имеет: 
# 1. Имя
# 2. Растение, за которым он ухаживает

# И может: 
# 1. Ухаживать за растением
# 2. Собирать с него урожай

# ++++++++++++++++Пример++++++++++++++++++





# Класс Tomato:
# 1. Создайте класс Tomato
# 2. Создайте статическое свойство states, которое будет содержать все стадии созревания помидора
# 3. Создайте метод init(), внутри которого будут определены два динамических protected свойства: 1) _index - передается параметром и 2) _state - принимает первое значение из словаря states
# 4. Создайте метод grow(), который будет переводить томат на следующую стадию созревания
# 5. Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг последней стадии созревания)

# Класс TomatoBush
# 1. Создайте класс TomatoBush
# 2. Определите метод init(), который будет принимать в качестве параметра количество томатов и на его основе будет создавать список объектов класса Tomato. Данный список будет храниться внутри динамического свойства tomatoes.
# 3. Создайте метод grow_all(), который будет переводить все объекты из списка томатов на следующий этап созревания
# 4. Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из списка стали спелыми
# 5. Создайте метод give_away_all(), который будет чистить список томатов после сбора урожая

# Класс Gardener
# 1. Создайте класс Gardener
# 2. Создайте метод init(), внутри которого будут определены два динамических свойства: 1) name - передается параметром, является публичным и 2) _plant - принимает объект класса Tomato, является protected
# 3. Создайте метод work(), который заставляет садовника работать, что позволяет растению становиться более зрелым
# 4. Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все - садовник собирает урожай. Если нет - метод печатает предупреждение.
# 5. Создайте статический метод knowledge_base(), который выведет в консоль справку по садоводству.

# Тесты:
# 1. Вызовите справку по садоводству
# 2. Создайте объекты классов TomatoBush и Gardener
# 3. Используя объект класса Gardener, поухаживайте за кустом с помидорами
# 4. Попробуйте собрать урожай
# 5. Если томаты еще не дозрели, продолжайте ухаживать за ними
# 6. Соберите урожай

# Продукт
# Полка
# Магазин


"""
создать класс продукт 
с атрибутами: название, категория, цена

создать класс полка 
с атрибута: номер, вместимость, продукты(экземпляры Класса Продукт)

    1. в методе check_polk() должны проверить вместится ли все продукты в полку
    если продуктов будет больше предупредить об этом

    2. создать метод get_products()
        который будет возвращать название всех продуктов в листе


создать класс магазин 
с атрибутами: название, полки(экземпляры Класса Полка)
    1. создать метод get_products_all()
        который будет возвращать название всех продуктов в листе из всех полок
    2. создать метод get_products_price()
        который будет возвращать dict где ключ это название продукта а значения это цена из всех полок
    3. создать метод get_all_price()
        который   будет возвращать сумму всех товаров из всех полок
    4. создать метод get_categories()
        который будет возвращать все название категориев (категории не должны повторяться)
"""